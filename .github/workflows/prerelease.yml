name: Pre release pipelien

on:
  release:
    types:
      - prereleased

env:
  GH_TOKEN: ${{ secrets.GH_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  GPG_MAIL: info@newrelic.com
  GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  GPG_PRIVATE_KEY_BASE64: ${{ secrets.GPG_PRIVATE_KEY_BASE64 }} # base64 encoded
  PFX_CERTIFICATE_BASE64: ${{ secrets.PFX_CERTIFICATE_BASE64 }} # base64 encoded
  PFX_PASSPHRASE:  ${{ secrets.PFX_PASSPHRASE }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  TAG: ${{ github.event.release.tag_name }}
  REPO_FULL_NAME: "newrelic/nri-redis"#${{ github.event.repository.full_name }}
  INTEGRATION: "redis"

jobs:

  validate:
    name: Validate code via linters
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Validate code
        run: make ci/validate

  snyk:
    name: Run security checks via snyk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/golang@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  test-nix:
    name: Run unit tests on nix
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Unit tests
        run: make ci/test

  # can't run this step inside of container because of tests specific
  test-integration-nix:
    name: Run integration tests on nix
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/github.com/${REPO_FULL_NAME}
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          path: src/github.com/${REPO_FULL_NAME}
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.9.7'
      - name: Integration test
        env:
          GOPATH: ${{ github.workspace }}
        run: make integration-test

  #todo: add dedicated run windows tests action

  prerelease:
    name: Build binary for all platforms:arch, packages for nix and publish on GH Releases
    runs-on: ubuntu-latest
    needs: [validate, test-nix, test-integration-nix]
    steps:
      - uses: actions/checkout@v2
      - name: Pre release
        run: make ci/prerelease
      - name: Upload exe binaries to GHA Cache
        uses: actions/upload-artifact@v2
        with:
          name: win-binaries
          path: dist/nri-redis-win_windows_*/*.exe
      - name: Notify failure via Slack
        if: ${{ failure() }}
        uses: archive/github-actions-slack@master
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_WEBHOOK }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-text: ':shit: Repo: ${REPO_FULL_NAME}, prerelease for nix FAILURE!'

  package-win:
    name: Create MSI & Push GH
    runs-on: windows-2019
    needs: [prerelease]
    env:
      GOPATH: ${{ github.workspace }}
    defaults:
      run:
        working-directory: src/github.com/newrelic/nri-redis
    strategy:
      matrix:
        goarch: [amd64,386]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: src/github.com/newrelic/nri-redis
      - name: Get PFX certificate from GH secrets
        shell: bash
        run: printf "%s" "$PFX_CERTIFICATE_BASE64" | base64 -d - > mycert.pfx
      - name: Download zip from GH Release assets
        shell: bash
        run: |
          build\windows\download_win_zip.sh ${{ matrix.goarch }} ${INTEGRATION}
      - name: Create MSI
        shell: pwsh
        run: |
          .\build\windows\package_msi.ps1 -arch ${{ matrix.goarch }} -tag "$env:TAG" -pfx_certificate_base64 "$env:PFX_CERTIFICATE_BASE64" -pfx_passphrase "$env:PFX_PASSPHRASE"
      - name: Upload MSI to GH
        shell: bash
        run: |
          build/windows/upload_msi.sh ${{ matrix.goarch }} ${TAG}
      - name: Notify failure via Slack
        if: ${{ failure() }}
        uses: archive/github-actions-slack@master
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_WEBHOOK }}
          slack-channel: ${{ env.SLACK_CHANNEL }}
          slack-text: ':shit: Repo: ${REPO_FULL_NAME}, prerelease for Windows FAILURE!'